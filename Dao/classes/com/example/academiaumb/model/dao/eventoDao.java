package com.example.academiaumb.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVENTO".
*/
public class eventoDao extends AbstractDao<evento, Long> {

    public static final String TABLENAME = "EVENTO";

    /**
     * Properties of entity evento.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Titulo = new Property(1, String.class, "titulo", false, "TITULO");
        public final static Property Descripcion = new Property(2, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Direccion = new Property(3, String.class, "direccion", false, "DIRECCION");
        public final static Property Longitud = new Property(4, String.class, "longitud", false, "LONGITUD");
        public final static Property Latitud = new Property(5, String.class, "latitud", false, "LATITUD");
        public final static Property Nombre = new Property(6, String.class, "nombre", false, "NOMBRE");
    }


    public eventoDao(DaoConfig config) {
        super(config);
    }
    
    public eventoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVENTO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITULO\" TEXT," + // 1: titulo
                "\"DESCRIPCION\" TEXT," + // 2: descripcion
                "\"DIRECCION\" TEXT," + // 3: direccion
                "\"LONGITUD\" TEXT," + // 4: longitud
                "\"LATITUD\" TEXT," + // 5: latitud
                "\"NOMBRE\" TEXT);"); // 6: nombre
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVENTO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, evento entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String titulo = entity.getTitulo();
        if (titulo != null) {
            stmt.bindString(2, titulo);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(3, descripcion);
        }
 
        String direccion = entity.getDireccion();
        if (direccion != null) {
            stmt.bindString(4, direccion);
        }
 
        String longitud = entity.getLongitud();
        if (longitud != null) {
            stmt.bindString(5, longitud);
        }
 
        String latitud = entity.getLatitud();
        if (latitud != null) {
            stmt.bindString(6, latitud);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(7, nombre);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, evento entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String titulo = entity.getTitulo();
        if (titulo != null) {
            stmt.bindString(2, titulo);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(3, descripcion);
        }
 
        String direccion = entity.getDireccion();
        if (direccion != null) {
            stmt.bindString(4, direccion);
        }
 
        String longitud = entity.getLongitud();
        if (longitud != null) {
            stmt.bindString(5, longitud);
        }
 
        String latitud = entity.getLatitud();
        if (latitud != null) {
            stmt.bindString(6, latitud);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(7, nombre);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public evento readEntity(Cursor cursor, int offset) {
        evento entity = new evento( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // titulo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // descripcion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // direccion
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // longitud
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // latitud
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // nombre
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, evento entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitulo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescripcion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDireccion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLongitud(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLatitud(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNombre(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(evento entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(evento entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(evento entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
