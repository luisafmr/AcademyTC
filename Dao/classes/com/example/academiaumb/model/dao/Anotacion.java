package com.example.academiaumb.model.dao;

import org.greenrobot.greendao.annotation.*;

import com.example.academiaumb.model.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "ANOTACION".
 */
@Entity(active = true)
public class Anotacion {

    @Id
    private Long id;
    private String detalle;
    private String urlImagen;
    private String urlVoz;
    private String urlVideo;
    private Long anexoId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient AnotacionDao myDao;

    @ToOne(joinProperty = "anexoId")
    private Anexo anexo;

    @Generated
    private transient Long anexo__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Anotacion() {
    }

    public Anotacion(Long id) {
        this.id = id;
    }

    @Generated
    public Anotacion(Long id, String detalle, String urlImagen, String urlVoz, String urlVideo, Long anexoId) {
        this.id = id;
        this.detalle = detalle;
        this.urlImagen = urlImagen;
        this.urlVoz = urlVoz;
        this.urlVideo = urlVideo;
        this.anexoId = anexoId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAnotacionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDetalle() {
        return detalle;
    }

    public void setDetalle(String detalle) {
        this.detalle = detalle;
    }

    public String getUrlImagen() {
        return urlImagen;
    }

    public void setUrlImagen(String urlImagen) {
        this.urlImagen = urlImagen;
    }

    public String getUrlVoz() {
        return urlVoz;
    }

    public void setUrlVoz(String urlVoz) {
        this.urlVoz = urlVoz;
    }

    public String getUrlVideo() {
        return urlVideo;
    }

    public void setUrlVideo(String urlVideo) {
        this.urlVideo = urlVideo;
    }

    public Long getAnexoId() {
        return anexoId;
    }

    public void setAnexoId(Long anexoId) {
        this.anexoId = anexoId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Anexo getAnexo() {
        Long __key = this.anexoId;
        if (anexo__resolvedKey == null || !anexo__resolvedKey.equals(__key)) {
            __throwIfDetached();
            AnexoDao targetDao = daoSession.getAnexoDao();
            Anexo anexoNew = targetDao.load(__key);
            synchronized (this) {
                anexo = anexoNew;
            	anexo__resolvedKey = __key;
            }
        }
        return anexo;
    }

    @Generated
    public void setAnexo(Anexo anexo) {
        synchronized (this) {
            this.anexo = anexo;
            anexoId = anexo == null ? null : anexo.getId();
            anexo__resolvedKey = anexoId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
