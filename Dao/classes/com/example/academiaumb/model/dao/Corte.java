package com.example.academiaumb.model.dao;

import org.greenrobot.greendao.annotation.*;

import com.example.academiaumb.model.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "CORTE".
 */
@Entity(active = true)
public class Corte {

    @Id
    private Long id;
    private Integer corte1;
    private Integer corte2;
    private Integer corte3;
    private Integer nota1;
    private Integer nota2;
    private Integer nota3;
    private Long asignaturaId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient CorteDao myDao;

    @ToOne(joinProperty = "asignaturaId")
    private Asignatura asignatura;

    @Generated
    private transient Long asignatura__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Corte() {
    }

    public Corte(Long id) {
        this.id = id;
    }

    @Generated
    public Corte(Long id, Integer corte1, Integer corte2, Integer corte3, Integer nota1, Integer nota2, Integer nota3, Long asignaturaId) {
        this.id = id;
        this.corte1 = corte1;
        this.corte2 = corte2;
        this.corte3 = corte3;
        this.nota1 = nota1;
        this.nota2 = nota2;
        this.nota3 = nota3;
        this.asignaturaId = asignaturaId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCorteDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getCorte1() {
        return corte1;
    }

    public void setCorte1(Integer corte1) {
        this.corte1 = corte1;
    }

    public Integer getCorte2() {
        return corte2;
    }

    public void setCorte2(Integer corte2) {
        this.corte2 = corte2;
    }

    public Integer getCorte3() {
        return corte3;
    }

    public void setCorte3(Integer corte3) {
        this.corte3 = corte3;
    }

    public Integer getNota1() {
        return nota1;
    }

    public void setNota1(Integer nota1) {
        this.nota1 = nota1;
    }

    public Integer getNota2() {
        return nota2;
    }

    public void setNota2(Integer nota2) {
        this.nota2 = nota2;
    }

    public Integer getNota3() {
        return nota3;
    }

    public void setNota3(Integer nota3) {
        this.nota3 = nota3;
    }

    public Long getAsignaturaId() {
        return asignaturaId;
    }

    public void setAsignaturaId(Long asignaturaId) {
        this.asignaturaId = asignaturaId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Asignatura getAsignatura() {
        Long __key = this.asignaturaId;
        if (asignatura__resolvedKey == null || !asignatura__resolvedKey.equals(__key)) {
            __throwIfDetached();
            AsignaturaDao targetDao = daoSession.getAsignaturaDao();
            Asignatura asignaturaNew = targetDao.load(__key);
            synchronized (this) {
                asignatura = asignaturaNew;
            	asignatura__resolvedKey = __key;
            }
        }
        return asignatura;
    }

    @Generated
    public void setAsignatura(Asignatura asignatura) {
        synchronized (this) {
            this.asignatura = asignatura;
            asignaturaId = asignatura == null ? null : asignatura.getId();
            asignatura__resolvedKey = asignaturaId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
