package com.example.academiaumb.model.dao;

import org.greenrobot.greendao.annotation.*;

import com.example.academiaumb.model.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "HORARIO".
 */
@Entity(active = true)
public class Horario {

    @Id
    private Long id;

    @NotNull
    private String dia;

    @NotNull
    private String horaEntrada;

    @NotNull
    private String horaSalida;
    private String salon;
    private Integer posicion;
    private Long asignaturaId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient HorarioDao myDao;

    @ToOne(joinProperty = "asignaturaId")
    private Asignatura asignatura;

    @Generated
    private transient Long asignatura__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Horario() {
    }

    public Horario(Long id) {
        this.id = id;
    }

    @Generated
    public Horario(Long id, String dia, String horaEntrada, String horaSalida, String salon, Integer posicion, Long asignaturaId) {
        this.id = id;
        this.dia = dia;
        this.horaEntrada = horaEntrada;
        this.horaSalida = horaSalida;
        this.salon = salon;
        this.posicion = posicion;
        this.asignaturaId = asignaturaId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHorarioDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getDia() {
        return dia;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDia(@NotNull String dia) {
        this.dia = dia;
    }

    @NotNull
    public String getHoraEntrada() {
        return horaEntrada;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setHoraEntrada(@NotNull String horaEntrada) {
        this.horaEntrada = horaEntrada;
    }

    @NotNull
    public String getHoraSalida() {
        return horaSalida;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setHoraSalida(@NotNull String horaSalida) {
        this.horaSalida = horaSalida;
    }

    public String getSalon() {
        return salon;
    }

    public void setSalon(String salon) {
        this.salon = salon;
    }

    public Integer getPosicion() {
        return posicion;
    }

    public void setPosicion(Integer posicion) {
        this.posicion = posicion;
    }

    public Long getAsignaturaId() {
        return asignaturaId;
    }

    public void setAsignaturaId(Long asignaturaId) {
        this.asignaturaId = asignaturaId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Asignatura getAsignatura() {
        Long __key = this.asignaturaId;
        if (asignatura__resolvedKey == null || !asignatura__resolvedKey.equals(__key)) {
            __throwIfDetached();
            AsignaturaDao targetDao = daoSession.getAsignaturaDao();
            Asignatura asignaturaNew = targetDao.load(__key);
            synchronized (this) {
                asignatura = asignaturaNew;
            	asignatura__resolvedKey = __key;
            }
        }
        return asignatura;
    }

    @Generated
    public void setAsignatura(Asignatura asignatura) {
        synchronized (this) {
            this.asignatura = asignatura;
            asignaturaId = asignatura == null ? null : asignatura.getId();
            asignatura__resolvedKey = asignaturaId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
