package com.example.academiaumb.model.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HORARIO".
*/
public class HorarioDao extends AbstractDao<Horario, Long> {

    public static final String TABLENAME = "HORARIO";

    /**
     * Properties of entity Horario.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Dia = new Property(1, String.class, "dia", false, "DIA");
        public final static Property HoraEntrada = new Property(2, String.class, "horaEntrada", false, "HORA_ENTRADA");
        public final static Property HoraSalida = new Property(3, String.class, "horaSalida", false, "HORA_SALIDA");
        public final static Property Salon = new Property(4, String.class, "salon", false, "SALON");
        public final static Property Posicion = new Property(5, Integer.class, "posicion", false, "POSICION");
        public final static Property AsignaturaId = new Property(6, Long.class, "asignaturaId", false, "ASIGNATURA_ID");
    }

    private DaoSession daoSession;

    private Query<Horario> asignatura_HorariosQuery;

    public HorarioDao(DaoConfig config) {
        super(config);
    }
    
    public HorarioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HORARIO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DIA\" TEXT NOT NULL ," + // 1: dia
                "\"HORA_ENTRADA\" TEXT NOT NULL ," + // 2: horaEntrada
                "\"HORA_SALIDA\" TEXT NOT NULL ," + // 3: horaSalida
                "\"SALON\" TEXT," + // 4: salon
                "\"POSICION\" INTEGER," + // 5: posicion
                "\"ASIGNATURA_ID\" INTEGER);"); // 6: asignaturaId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HORARIO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Horario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDia());
        stmt.bindString(3, entity.getHoraEntrada());
        stmt.bindString(4, entity.getHoraSalida());
 
        String salon = entity.getSalon();
        if (salon != null) {
            stmt.bindString(5, salon);
        }
 
        Integer posicion = entity.getPosicion();
        if (posicion != null) {
            stmt.bindLong(6, posicion);
        }
 
        Long asignaturaId = entity.getAsignaturaId();
        if (asignaturaId != null) {
            stmt.bindLong(7, asignaturaId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Horario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDia());
        stmt.bindString(3, entity.getHoraEntrada());
        stmt.bindString(4, entity.getHoraSalida());
 
        String salon = entity.getSalon();
        if (salon != null) {
            stmt.bindString(5, salon);
        }
 
        Integer posicion = entity.getPosicion();
        if (posicion != null) {
            stmt.bindLong(6, posicion);
        }
 
        Long asignaturaId = entity.getAsignaturaId();
        if (asignaturaId != null) {
            stmt.bindLong(7, asignaturaId);
        }
    }

    @Override
    protected final void attachEntity(Horario entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Horario readEntity(Cursor cursor, int offset) {
        Horario entity = new Horario( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // dia
            cursor.getString(offset + 2), // horaEntrada
            cursor.getString(offset + 3), // horaSalida
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // salon
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // posicion
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // asignaturaId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Horario entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDia(cursor.getString(offset + 1));
        entity.setHoraEntrada(cursor.getString(offset + 2));
        entity.setHoraSalida(cursor.getString(offset + 3));
        entity.setSalon(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPosicion(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setAsignaturaId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Horario entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Horario entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Horario entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "horarios" to-many relationship of Asignatura. */
    public List<Horario> _queryAsignatura_Horarios(Long asignaturaId) {
        synchronized (this) {
            if (asignatura_HorariosQuery == null) {
                QueryBuilder<Horario> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AsignaturaId.eq(null));
                asignatura_HorariosQuery = queryBuilder.build();
            }
        }
        Query<Horario> query = asignatura_HorariosQuery.forCurrentThread();
        query.setParameter(0, asignaturaId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAsignaturaDao().getAllColumns());
            builder.append(" FROM HORARIO T");
            builder.append(" LEFT JOIN ASIGNATURA T0 ON T.\"ASIGNATURA_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Horario loadCurrentDeep(Cursor cursor, boolean lock) {
        Horario entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Asignatura asignatura = loadCurrentOther(daoSession.getAsignaturaDao(), cursor, offset);
        entity.setAsignatura(asignatura);

        return entity;    
    }

    public Horario loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Horario> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Horario> list = new ArrayList<Horario>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Horario> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Horario> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
