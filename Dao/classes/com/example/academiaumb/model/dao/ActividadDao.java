package com.example.academiaumb.model.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACTIVIDAD".
*/
public class ActividadDao extends AbstractDao<Actividad, Long> {

    public static final String TABLENAME = "ACTIVIDAD";

    /**
     * Properties of entity Actividad.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nombre = new Property(1, String.class, "Nombre", false, "NOMBRE");
        public final static Property FechaEntrega = new Property(2, java.util.Date.class, "FechaEntrega", false, "FECHA_ENTREGA");
        public final static Property Nota = new Property(3, Double.class, "Nota", false, "NOTA");
        public final static Property Tipo = new Property(4, String.class, "tipo", false, "TIPO");
        public final static Property Categaria = new Property(5, String.class, "categaria", false, "CATEGARIA");
        public final static Property AsignaturaId = new Property(6, Long.class, "AsignaturaId", false, "ASIGNATURA_ID");
    }

    private DaoSession daoSession;

    private Query<Actividad> asignatura_ActividadesQuery;

    public ActividadDao(DaoConfig config) {
        super(config);
    }
    
    public ActividadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACTIVIDAD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NOMBRE\" TEXT," + // 1: Nombre
                "\"FECHA_ENTREGA\" INTEGER," + // 2: FechaEntrega
                "\"NOTA\" REAL," + // 3: Nota
                "\"TIPO\" TEXT NOT NULL ," + // 4: tipo
                "\"CATEGARIA\" TEXT NOT NULL ," + // 5: categaria
                "\"ASIGNATURA_ID\" INTEGER);"); // 6: AsignaturaId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACTIVIDAD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Actividad entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Nombre = entity.getNombre();
        if (Nombre != null) {
            stmt.bindString(2, Nombre);
        }
 
        java.util.Date FechaEntrega = entity.getFechaEntrega();
        if (FechaEntrega != null) {
            stmt.bindLong(3, FechaEntrega.getTime());
        }
 
        Double Nota = entity.getNota();
        if (Nota != null) {
            stmt.bindDouble(4, Nota);
        }
        stmt.bindString(5, entity.getTipo());
        stmt.bindString(6, entity.getCategaria());
 
        Long AsignaturaId = entity.getAsignaturaId();
        if (AsignaturaId != null) {
            stmt.bindLong(7, AsignaturaId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Actividad entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Nombre = entity.getNombre();
        if (Nombre != null) {
            stmt.bindString(2, Nombre);
        }
 
        java.util.Date FechaEntrega = entity.getFechaEntrega();
        if (FechaEntrega != null) {
            stmt.bindLong(3, FechaEntrega.getTime());
        }
 
        Double Nota = entity.getNota();
        if (Nota != null) {
            stmt.bindDouble(4, Nota);
        }
        stmt.bindString(5, entity.getTipo());
        stmt.bindString(6, entity.getCategaria());
 
        Long AsignaturaId = entity.getAsignaturaId();
        if (AsignaturaId != null) {
            stmt.bindLong(7, AsignaturaId);
        }
    }

    @Override
    protected final void attachEntity(Actividad entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Actividad readEntity(Cursor cursor, int offset) {
        Actividad entity = new Actividad( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Nombre
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // FechaEntrega
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // Nota
            cursor.getString(offset + 4), // tipo
            cursor.getString(offset + 5), // categaria
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // AsignaturaId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Actividad entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFechaEntrega(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setNota(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setTipo(cursor.getString(offset + 4));
        entity.setCategaria(cursor.getString(offset + 5));
        entity.setAsignaturaId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Actividad entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Actividad entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Actividad entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "actividades" to-many relationship of Asignatura. */
    public List<Actividad> _queryAsignatura_Actividades(Long AsignaturaId) {
        synchronized (this) {
            if (asignatura_ActividadesQuery == null) {
                QueryBuilder<Actividad> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AsignaturaId.eq(null));
                asignatura_ActividadesQuery = queryBuilder.build();
            }
        }
        Query<Actividad> query = asignatura_ActividadesQuery.forCurrentThread();
        query.setParameter(0, AsignaturaId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAsignaturaDao().getAllColumns());
            builder.append(" FROM ACTIVIDAD T");
            builder.append(" LEFT JOIN ASIGNATURA T0 ON T.\"ASIGNATURA_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Actividad loadCurrentDeep(Cursor cursor, boolean lock) {
        Actividad entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Asignatura asignatura = loadCurrentOther(daoSession.getAsignaturaDao(), cursor, offset);
        entity.setAsignatura(asignatura);

        return entity;    
    }

    public Actividad loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Actividad> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Actividad> list = new ArrayList<Actividad>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Actividad> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Actividad> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
