package com.example.academiaumb.model.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CORTE".
*/
public class CorteDao extends AbstractDao<Corte, Long> {

    public static final String TABLENAME = "CORTE";

    /**
     * Properties of entity Corte.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Corte1 = new Property(1, Integer.class, "corte1", false, "CORTE1");
        public final static Property Corte2 = new Property(2, Integer.class, "corte2", false, "CORTE2");
        public final static Property Corte3 = new Property(3, Integer.class, "corte3", false, "CORTE3");
        public final static Property Nota1 = new Property(4, Integer.class, "nota1", false, "NOTA1");
        public final static Property Nota2 = new Property(5, Integer.class, "nota2", false, "NOTA2");
        public final static Property Nota3 = new Property(6, Integer.class, "nota3", false, "NOTA3");
        public final static Property AsignaturaId = new Property(7, Long.class, "asignaturaId", false, "ASIGNATURA_ID");
    }

    private DaoSession daoSession;


    public CorteDao(DaoConfig config) {
        super(config);
    }
    
    public CorteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CORTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CORTE1\" INTEGER," + // 1: corte1
                "\"CORTE2\" INTEGER," + // 2: corte2
                "\"CORTE3\" INTEGER," + // 3: corte3
                "\"NOTA1\" INTEGER," + // 4: nota1
                "\"NOTA2\" INTEGER," + // 5: nota2
                "\"NOTA3\" INTEGER," + // 6: nota3
                "\"ASIGNATURA_ID\" INTEGER);"); // 7: asignaturaId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CORTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Corte entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer corte1 = entity.getCorte1();
        if (corte1 != null) {
            stmt.bindLong(2, corte1);
        }
 
        Integer corte2 = entity.getCorte2();
        if (corte2 != null) {
            stmt.bindLong(3, corte2);
        }
 
        Integer corte3 = entity.getCorte3();
        if (corte3 != null) {
            stmt.bindLong(4, corte3);
        }
 
        Integer nota1 = entity.getNota1();
        if (nota1 != null) {
            stmt.bindLong(5, nota1);
        }
 
        Integer nota2 = entity.getNota2();
        if (nota2 != null) {
            stmt.bindLong(6, nota2);
        }
 
        Integer nota3 = entity.getNota3();
        if (nota3 != null) {
            stmt.bindLong(7, nota3);
        }
 
        Long asignaturaId = entity.getAsignaturaId();
        if (asignaturaId != null) {
            stmt.bindLong(8, asignaturaId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Corte entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer corte1 = entity.getCorte1();
        if (corte1 != null) {
            stmt.bindLong(2, corte1);
        }
 
        Integer corte2 = entity.getCorte2();
        if (corte2 != null) {
            stmt.bindLong(3, corte2);
        }
 
        Integer corte3 = entity.getCorte3();
        if (corte3 != null) {
            stmt.bindLong(4, corte3);
        }
 
        Integer nota1 = entity.getNota1();
        if (nota1 != null) {
            stmt.bindLong(5, nota1);
        }
 
        Integer nota2 = entity.getNota2();
        if (nota2 != null) {
            stmt.bindLong(6, nota2);
        }
 
        Integer nota3 = entity.getNota3();
        if (nota3 != null) {
            stmt.bindLong(7, nota3);
        }
 
        Long asignaturaId = entity.getAsignaturaId();
        if (asignaturaId != null) {
            stmt.bindLong(8, asignaturaId);
        }
    }

    @Override
    protected final void attachEntity(Corte entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Corte readEntity(Cursor cursor, int offset) {
        Corte entity = new Corte( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // corte1
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // corte2
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // corte3
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // nota1
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // nota2
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // nota3
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // asignaturaId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Corte entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCorte1(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCorte2(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCorte3(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setNota1(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setNota2(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setNota3(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setAsignaturaId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Corte entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Corte entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Corte entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAsignaturaDao().getAllColumns());
            builder.append(" FROM CORTE T");
            builder.append(" LEFT JOIN ASIGNATURA T0 ON T.\"ASIGNATURA_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Corte loadCurrentDeep(Cursor cursor, boolean lock) {
        Corte entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Asignatura asignatura = loadCurrentOther(daoSession.getAsignaturaDao(), cursor, offset);
        entity.setAsignatura(asignatura);

        return entity;    
    }

    public Corte loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Corte> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Corte> list = new ArrayList<Corte>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Corte> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Corte> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
