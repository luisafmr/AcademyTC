package com.example.academiaumb.model.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ASIGNATURA".
*/
public class AsignaturaDao extends AbstractDao<Asignatura, Long> {

    public static final String TABLENAME = "ASIGNATURA";

    /**
     * Properties of entity Asignatura.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nombre = new Property(1, String.class, "nombre", false, "NOMBRE");
        public final static Property Color = new Property(2, String.class, "color", false, "COLOR");
        public final static Property Detalles = new Property(3, String.class, "detalles", false, "DETALLES");
        public final static Property Nota = new Property(4, Double.class, "nota", false, "NOTA");
        public final static Property ProfesorId = new Property(5, Long.class, "ProfesorId", false, "PROFESOR_ID");
        public final static Property CorteId = new Property(6, Long.class, "corteId", false, "CORTE_ID");
    }

    private DaoSession daoSession;

    private Query<Asignatura> profesor_AsignaturasQuery;

    public AsignaturaDao(DaoConfig config) {
        super(config);
    }
    
    public AsignaturaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ASIGNATURA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NOMBRE\" TEXT," + // 1: nombre
                "\"COLOR\" TEXT NOT NULL ," + // 2: color
                "\"DETALLES\" TEXT," + // 3: detalles
                "\"NOTA\" REAL," + // 4: nota
                "\"PROFESOR_ID\" INTEGER," + // 5: ProfesorId
                "\"CORTE_ID\" INTEGER);"); // 6: corteId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ASIGNATURA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Asignatura entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(2, nombre);
        }
        stmt.bindString(3, entity.getColor());
 
        String detalles = entity.getDetalles();
        if (detalles != null) {
            stmt.bindString(4, detalles);
        }
 
        Double nota = entity.getNota();
        if (nota != null) {
            stmt.bindDouble(5, nota);
        }
 
        Long ProfesorId = entity.getProfesorId();
        if (ProfesorId != null) {
            stmt.bindLong(6, ProfesorId);
        }
 
        Long corteId = entity.getCorteId();
        if (corteId != null) {
            stmt.bindLong(7, corteId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Asignatura entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(2, nombre);
        }
        stmt.bindString(3, entity.getColor());
 
        String detalles = entity.getDetalles();
        if (detalles != null) {
            stmt.bindString(4, detalles);
        }
 
        Double nota = entity.getNota();
        if (nota != null) {
            stmt.bindDouble(5, nota);
        }
 
        Long ProfesorId = entity.getProfesorId();
        if (ProfesorId != null) {
            stmt.bindLong(6, ProfesorId);
        }
 
        Long corteId = entity.getCorteId();
        if (corteId != null) {
            stmt.bindLong(7, corteId);
        }
    }

    @Override
    protected final void attachEntity(Asignatura entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Asignatura readEntity(Cursor cursor, int offset) {
        Asignatura entity = new Asignatura( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nombre
            cursor.getString(offset + 2), // color
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // detalles
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // nota
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // ProfesorId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // corteId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Asignatura entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setColor(cursor.getString(offset + 2));
        entity.setDetalles(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNota(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setProfesorId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setCorteId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Asignatura entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Asignatura entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Asignatura entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "asignaturas" to-many relationship of Profesor. */
    public List<Asignatura> _queryProfesor_Asignaturas(Long ProfesorId) {
        synchronized (this) {
            if (profesor_AsignaturasQuery == null) {
                QueryBuilder<Asignatura> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProfesorId.eq(null));
                profesor_AsignaturasQuery = queryBuilder.build();
            }
        }
        Query<Asignatura> query = profesor_AsignaturasQuery.forCurrentThread();
        query.setParameter(0, ProfesorId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getProfesorDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCorteDao().getAllColumns());
            builder.append(" FROM ASIGNATURA T");
            builder.append(" LEFT JOIN PROFESOR T0 ON T.\"PROFESOR_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN CORTE T1 ON T.\"CORTE_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Asignatura loadCurrentDeep(Cursor cursor, boolean lock) {
        Asignatura entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Profesor profesor = loadCurrentOther(daoSession.getProfesorDao(), cursor, offset);
        entity.setProfesor(profesor);
        offset += daoSession.getProfesorDao().getAllColumns().length;

        Corte corte = loadCurrentOther(daoSession.getCorteDao(), cursor, offset);
        entity.setCorte(corte);

        return entity;    
    }

    public Asignatura loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Asignatura> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Asignatura> list = new ArrayList<Asignatura>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Asignatura> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Asignatura> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
