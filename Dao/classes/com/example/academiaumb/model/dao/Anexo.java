package com.example.academiaumb.model.dao;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.example.academiaumb.model.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "ANEXO".
 */
@Entity(active = true)
public class Anexo {

    @Id
    private Long id;
    private String titulo;
    private Long asignaturaId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient AnexoDao myDao;

    @ToOne(joinProperty = "asignaturaId")
    private Asignatura asignatura;

    @Generated
    private transient Long asignatura__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "anexoId")
    })
    private List<Anotacion> anotaciones;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Anexo() {
    }

    public Anexo(Long id) {
        this.id = id;
    }

    @Generated
    public Anexo(Long id, String titulo, Long asignaturaId) {
        this.id = id;
        this.titulo = titulo;
        this.asignaturaId = asignaturaId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAnexoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitulo() {
        return titulo;
    }

    public void setTitulo(String titulo) {
        this.titulo = titulo;
    }

    public Long getAsignaturaId() {
        return asignaturaId;
    }

    public void setAsignaturaId(Long asignaturaId) {
        this.asignaturaId = asignaturaId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Asignatura getAsignatura() {
        Long __key = this.asignaturaId;
        if (asignatura__resolvedKey == null || !asignatura__resolvedKey.equals(__key)) {
            __throwIfDetached();
            AsignaturaDao targetDao = daoSession.getAsignaturaDao();
            Asignatura asignaturaNew = targetDao.load(__key);
            synchronized (this) {
                asignatura = asignaturaNew;
            	asignatura__resolvedKey = __key;
            }
        }
        return asignatura;
    }

    @Generated
    public void setAsignatura(Asignatura asignatura) {
        synchronized (this) {
            this.asignatura = asignatura;
            asignaturaId = asignatura == null ? null : asignatura.getId();
            asignatura__resolvedKey = asignaturaId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Anotacion> getAnotaciones() {
        if (anotaciones == null) {
            __throwIfDetached();
            AnotacionDao targetDao = daoSession.getAnotacionDao();
            List<Anotacion> anotacionesNew = targetDao._queryAnexo_Anotaciones(id);
            synchronized (this) {
                if(anotaciones == null) {
                    anotaciones = anotacionesNew;
                }
            }
        }
        return anotaciones;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetAnotaciones() {
        anotaciones = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
